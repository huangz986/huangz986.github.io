{"meta":{"title":"榛子的小站","subtitle":null,"description":"记录学习生活。linux, c, c++, rust, qt.","author":"闪亮的瞬间","url":"http://bandingyun.com","root":"/"},"pages":[],"posts":[{"title":"人生进入新阶段","slug":"人生进入新阶段","date":"2019-04-22T12:10:47.000Z","updated":"2019-05-01T15:05:39.912Z","comments":true,"path":"2019/04/22/人生进入新阶段/","link":"","permalink":"http://bandingyun.com/2019/04/22/人生进入新阶段/","excerpt":"","text":"宝宝正在老婆肚子中孕育，我的人生进入了新的阶段。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://bandingyun.com/tags/生活/"}]},{"title":"Some Thoughts About References and Borrowing of the Rust book","slug":"Some-Thoughts-About-References-and-Borrowing-of-the-Rust-book","date":"2019-04-20T16:21:25.000Z","updated":"2019-05-01T15:05:39.908Z","comments":true,"path":"2019/04/21/Some-Thoughts-About-References-and-Borrowing-of-the-Rust-book/","link":"","permalink":"http://bandingyun.com/2019/04/21/Some-Thoughts-About-References-and-Borrowing-of-the-Rust-book/","excerpt":"","text":"I’ve been reading the book, The Rust Programming Language, lately, and after reading CH4.2. References and Borrowing, I think there is something wrong or misleading in the book. In general, it concluded that the rules of references are:1. At any given time, you can have either one mutable reference or any number of immutable references.2. References must always be valid.These two rules are definitely right of course, but they are not very clear and accurate. Actually, it’s not just the book, the rustc’s error messages about borrowing are not very clear either. The REAL Rules of ReferencesHere I will state the rules of references in my understanding first, and then explain the details. The rules are: References must be valid while being used. A mutable reference will invalidate all previous references, including mutable and immutable ones. An immutable reference will invalidate the previous mutable reference, if there is one, but don’t affect other immutable references. ps: these rules apply to “a particular piece of data in a particular scope” When I Encounter The First ProblemIn the middle of this chapter, It states such a conclusion and gives an example about it:But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:Filename:src/main.rs123456let mut s = String::from(\"hello\");let r1 = &amp;mut s;let r2 = &amp;mut s;println!(\"&#123;&#125;, &#123;&#125;\", r1, r2); The error message says:error[E0499]: cannot borrow &#39;s&#39; as mutable more than once at a time Well, this example doesn’t compile indeed. But somehow I accidentally delete the last sentence of the example, and compile it successly without error. How could that happen? Rustc just tell me cannot borrow ‘s’ as mutable more than once at a time, and there are two references r1 and r2, if I don’t println! then no error at all? So I CAN borrow ‘s’ more than once? Then I try to print r1 and r2 separately, error occurs. I could print r2 but not r1. And thenAs I read on, something similar happens, if combining mutable and immutable references:1234567let mut s = String::from(\"hello\");let r1 = &amp;s; // no problemlet r2 = &amp;s; // no problemlet r3 = &amp;mut s; // BIG PROBLEMprintln!(\"&#123;&#125;, &#123;&#125;, and &#123;&#125;\", r1, r2 ,r3); Error says:error[E0502]: cannot borrow &#39;s&#39; as mutable because it is also borrowed as immutable Actually, there is no problem when declaring r3, but a BIG PROBLEM if you try to print all references. I you print them separately, you’ll find that r3 is printable, while r1 and r2 are not available to print. As the error message says, I cannot borrow ‘s’ as mutable because it is also borrowed as immutable, we know it’s definitely no true. The ConclusionFrom the previous examples, we know that we could borrow ‘s’ as mutable more than once, but we could only access the last one, and that we could borrow ‘s’ as mutable after it is also borrowed as immutable, but again we could only access the last reference which is mutable. The book says References must always be valid, so I assume that there is a validation status for every reference, a reference is accessable only if it’s valid. Thus came my version of rules of references: References must be valid while being used. A mutable reference will invalidate all previous references, including mutable and immutable ones. An immutable reference will invalidate the previous mutable reference, if there is one, but don’t affect other immutable references. Something ElseIf you run rustc --explain E0499 and rustc --explain E0502, to find the explanations of those examples, you’ll find the same mistakes in them. The wrong examples they provide actually turn out to be correct. Although we have to handle the mut issues which might have been raised due to rust update in those explanations. I had intended to write more details, but I had no spare time to do so. If anyone’s reading my post, he should go through these rustc --explain Exxxx himself.","categories":[],"tags":[{"name":"rust","slug":"rust","permalink":"http://bandingyun.com/tags/rust/"}]},{"title":"改学软件测试","slug":"改学软件测试","date":"2018-04-25T13:07:42.000Z","updated":"2019-05-01T15:05:39.912Z","comments":true,"path":"2018/04/25/改学软件测试/","link":"","permalink":"http://bandingyun.com/2018/04/25/改学软件测试/","excerpt":"","text":"改学软件测试从今天开始，改学软件测试，主要是因为面临经济压力，学Java周期太长。 长期计划职业道路就走软件测试方向。自考至博士，至少也要到硕士，不争馒头争口气。这口气不争，何以立足！","categories":[],"tags":[]},{"title":"hexo+github建站基本功能完成","slug":"hexo-github建站基本功能完成","date":"2018-02-06T12:54:49.000Z","updated":"2019-05-01T15:05:39.908Z","comments":true,"path":"2018/02/06/hexo-github建站基本功能完成/","link":"","permalink":"http://bandingyun.com/2018/02/06/hexo-github建站基本功能完成/","excerpt":"","text":"建站完成综合多篇文章，选用一个简单主题，基本功能就有了，边用边学吧。 建站目的主要是因为想学习Java，从事开发工作。顺便开始记录自己的人生，希望能够坚持下去。","categories":[],"tags":[{"name":"nonsense","slug":"nonsense","permalink":"http://bandingyun.com/tags/nonsense/"}]}]}